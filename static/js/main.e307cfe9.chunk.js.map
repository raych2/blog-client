{"version":3,"sources":["components/PostPreview.js","components/shared/LoadingIndicator.js","components/shared/ErrorMessage.js","App.js","components/Header.js","components/CommentDetail.js","components/PostDetail.js","Routes.js","index.js"],"names":["PostContainer","styled","div","PostSection","PostInfo","PostLink","Link","PostTitle","h2","PostAuthor","p","PostTextPreview","Divider","hr","PostData","PostPreview","props","id","post","_id","title","author","username","published","postDate","comments","postText","text","substring","parseEntities","DOMParser","parseFromString","body","innerText","to","length","icon","faCommentAlt","SpinnerContainer","LoadingIndicator","name","color","ErrorMessage","PostList","App","useState","blogPosts","setBlogPosts","loading","setLoading","error","setError","blogAPI","useEffect","a","fetch","response","status","statusText","json","data","posts","console","log","fetchBlogAPI","map","index","Navbar","nav","NavLink","Title","Header","CommentContainer","Author","CommentDetail","comment","commentDate","PostLayout","CommentSection","CommentForm","form","GuestName","input","GuestComment","textarea","SubmitButton","CommentList","h1","Date","Text","CommentHeader","CommentError","PostDetail","match","blogPost","setBlogPost","setAuthor","setComments","commentError","setCommentError","guestName","setGuestName","guestComment","setGuestComment","params","fetchBlogPostAPI","addComment","e","preventDefault","method","headers","JSON","stringify","commentData","errors","commentErrors","forEach","push","msg","onSubmit","htmlFor","value","type","onChange","target","placeholder","required","rows","cols","maxLength","Routes","basename","exact","path","component","from","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e307cfe9.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { faCommentAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst PostContainer = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: center;\n`;\nconst PostSection = styled.div`\n  height: auto;\n  width: 50vw;\n  margin: 10px 0;\n  padding: 20px;\n  background: #ffffff;\n  border: 0.5px solid #7a7a7a;\n  border-radius: 5px;\n  @media only screen and (min-device-width: 768px) and (max-device-width: 1024px) {\n    width: 80vw;\n  }\n  @media only screen and (min-device-width: 320px) and (max-device-width: 480px) {\n    width: 95%;\n  }\n`;\nconst PostInfo = styled.div`\n  max-width: 100%;\n  text-align: left;\n`;\nconst PostLink = styled(Link)`\n  &:focus,\n  &:hover,\n  &:visited,\n  &:link,\n  &:active {\n    text-decoration: none;\n  }\n  color: #000;\n`;\nconst PostTitle = styled.h2`\n  margin: 5px auto;\n`;\nconst PostAuthor = styled.p`\n  margin: 5px auto;\n`;\nconst PostTextPreview = styled.div`\n  margin: 10px auto;\n`;\nconst Divider = styled.hr`\n  margin: 10px auto;\n  border: none;\n  border-top: 1px solid #000;\n`;\nconst PostData = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: space-between;\n  max-width: 100%;\n  margin: 0 auto;\n  @media only screen and (min-device-width: 320px) and (max-device-width: 480px) {\n    flex-direction: column;\n  }\n`;\nconst PostPreview = (props) => {\n  const id = props.post._id;\n  const title = props.post.title;\n  const author = props.post.author.username;\n  const published = props.post.published;\n  const postDate = props.post.postDate;\n  const comments = props.post.comments;\n  const postText = props.post.text.substring(0, 75) + '...';\n  const parseEntities = (text) =>\n    new DOMParser().parseFromString(text, 'text/html').body.innerText;\n\n  return published ? (\n    <PostContainer>\n      <PostSection>\n        <PostInfo>\n          <PostLink to={`/posts/${id}`}>\n            <PostTitle>{parseEntities(title)}</PostTitle>\n          </PostLink>\n          <PostAuthor>By: {author}</PostAuthor>\n          <PostTextPreview>{parseEntities(postText)}</PostTextPreview>\n        </PostInfo>\n        <Divider />\n        <PostData>\n          <p>{postDate}</p>\n          {comments.length === 0 ? (\n            <p>\n              <FontAwesomeIcon icon={faCommentAlt} /> Add a comment\n            </p>\n          ) : comments.length === 1 ? (\n            <p>\n              <FontAwesomeIcon icon={faCommentAlt} /> {comments.length} Comment\n            </p>\n          ) : (\n            <p>\n              <FontAwesomeIcon icon={faCommentAlt} /> {comments.length} Comments\n            </p>\n          )}\n        </PostData>\n      </PostSection>\n    </PostContainer>\n  ) : null;\n};\n\nexport default PostPreview;\n","import styled from 'styled-components';\nimport Spinner from 'react-spinkit';\n\nconst SpinnerContainer = styled.div`\n  margin-top: 200px;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-content: center;\n  align-items: center;\n`;\n\nconst LoadingIndicator = () => {\n  return (\n    <SpinnerContainer>\n      <Spinner name=\"ball-spin-fade-loader\" color=\"#FCA311\" />\n    </SpinnerContainer>\n  );\n};\n\nexport default LoadingIndicator;\n","import styled from 'styled-components';\n\nconst ErrorMessage = styled.div`\n  margin-top: 50px;\n  text-align: center;\n  color: #a9232e;\n`;\n\nexport default ErrorMessage;","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport PostPreview from './components/PostPreview';\nimport LoadingIndicator from './components/shared/LoadingIndicator';\nimport ErrorMessage from './components/shared/ErrorMessage';\n\nconst PostList = styled.div`\n  margin-top: 50px;\n  display: flex;\n  flex-flow: column nowrap;\n  align-content: space-evenly;\n`;\n\nconst App = () => {\n  const [blogPosts, setBlogPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const blogAPI = 'https://rt-blog-api.herokuapp.com/posts';\n\n  useEffect(() => {\n    async function fetchBlogAPI() {\n      setLoading(true);\n      try {\n        const response = await fetch(blogAPI);\n        if (response.status === 404) {\n          setError(response.statusText);\n        } else {\n          setError('');\n          const data = await response.json();\n          setBlogPosts(data.posts);\n        }\n      } catch (err) {\n        console.log(err);\n      }\n      setLoading(false);\n    }\n    fetchBlogAPI();\n  }, []);\n\n  return (\n    <div>\n      {error ? (\n        <ErrorMessage>Error: {error}</ErrorMessage>\n      ) : (\n        <>\n          {loading ? (\n            <LoadingIndicator />\n          ) : (\n            <PostList>\n              {blogPosts.map((post, index) => {\n                return (\n                  <div key={post._id}>\n                    <PostPreview post={blogPosts[index]} />\n                  </div>\n                );\n              })}\n            </PostList>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nconst Navbar = styled.nav`\n  height: 10vh;\n  display: flex;\n  align-items: center;\n  background-color: #14213d;\n`;\nconst NavLink = styled(Link)`\n  &:focus,\n  &:hover,\n  &:visited,\n  &:link,\n  &:active {\n    text-decoration: none;\n  }\n  color: #ffffff;\n`;\nconst Title = styled.div`\n  margin: 1rem;\n  font-size: 2em;\n  font-weight: 400;\n  color: #ffffff;\n`;\n\nconst Header = () => {\n  return (\n    <Navbar>\n      <NavLink to=\"/\">\n        <Title>TOP Blog</Title>\n      </NavLink>\n    </Navbar>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst CommentContainer = styled.div`\n  height: auto;\n  width: 100%;\n  margin: 10px 0;\n  padding: 10px;\n  background: #ffffff;\n  border-radius: 5px;\n  border: 0.5px solid #e5e5e5;\n`;\nconst Author = styled.p`\n  margin-bottom: 20px;\n  color: #7a7a7a;\n`;\n\nconst CommentDetail = (props) => {\n  const parseEntities = (text) =>\n    new DOMParser().parseFromString(text, 'text/html').body.innerText;\n  const author = props.comment.author;\n  const commentDate = props.comment.commentDate;\n  const text = parseEntities(props.comment.text);\n\n  return (\n    <CommentContainer>\n      <Author>\n        {author} • {commentDate}\n      </Author>\n      <p>{text}</p>\n    </CommentContainer>\n  );\n};\n\nexport default CommentDetail;\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport CommentDetail from './CommentDetail';\nimport LoadingIndicator from './shared/LoadingIndicator';\nimport ErrorMessage from './shared/ErrorMessage';\n\nconst PostLayout = styled.div`\n  margin: 50px auto 0 auto;\n  height: auto;\n  width: 50vw;\n  background: #ffffff;\n  border: 0.5px solid #7a7a7a;\n  border-radius: 5px;\n  @media only screen and (min-device-width: 768px) and (max-device-width: 1024px) {\n    width: 90%;\n  }\n  @media only screen and (min-device-width: 320px) and (max-device-width: 480px) {\n    width: 95%;\n  }\n`;\nconst PostSection = styled.div`\n  padding: 20px;\n`;\nconst CommentSection = styled.div`\n  padding: 20px;\n  input {\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n  }\n`;\nconst CommentForm = styled.form`\n  display: flex;\n  flex-flow: column wrap;\n  margin: 10px auto 0 auto;\n  padding: 20px;\n  @media only screen and (min-device-width: 320px) and (max-device-width: 480px) {\n    padding: 0;\n  }\n`;\nconst GuestName = styled.input`\n  display: block;\n  width: 100%;\n  height: 40px;\n  margin: 10px auto;\n  font-size: 1em;\n  padding-left: 5px;\n  border: 0.5px solid #e5e5e5;\n  border-radius: 5px;\n`;\nconst GuestComment = styled.textarea`\n  display: block;\n  width: 100%;\n  margin: 10px auto;\n  font-size: 1em;\n  padding: 10px 0 0 5px;\n  border: 0.5px solid #e5e5e5;\n  border-radius: 5px;\n`;\nconst SubmitButton = styled.input`\n  margin: 5px auto;\n  width: 25%;\n  padding: 10px;\n  text-align: center;\n  color: #e8eddf;\n  background-color: #242423;\n  border-color: #242423;\n  border-radius: 3px;\n  font: 100 1rem 'Noto Sans JP', sans-serif;\n`;\nconst CommentList = styled.div`\n  padding: 20px;\n  @media only screen and (min-device-width: 320px) and (max-device-width: 480px) {\n    padding: 0;\n  }\n`;\nconst Title = styled.h1`\n  margin: 5px auto;\n`;\nconst Author = styled.h2`\n  margin: 5px auto;\n`;\nconst Date = styled.p`\n  margin: 5px auto 20px auto;\n  color: #7a7a7a;\n`;\nconst Text = styled.p`\n  margin: 10px auto;\n`;\nconst CommentHeader = styled.h2`\n  margin: 5px auto;\n`;\nconst CommentError = styled.div`\n  padding: 0 20px;\n  color: #a9232e;\n  @media only screen and (min-device-width: 320px) and (max-device-width: 480px) {\n    padding: 0;\n  }\n`;\n\nconst PostDetail = ({ match }) => {\n  const [blogPost, setBlogPost] = useState([]);\n  const [author, setAuthor] = useState('');\n  const [comments, setComments] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [commentError, setCommentError] = useState('');\n  const [guestName, setGuestName] = useState('');\n  const [guestComment, setGuestComment] = useState('');\n  const parseEntities = (text) =>\n    new DOMParser().parseFromString(text, 'text/html').body.innerText;\n\n  useEffect(() => {\n    async function fetchBlogPostAPI() {\n      setLoading(true);\n      try {\n        const response = await fetch(\n          `https://rt-blog-api.herokuapp.com/posts/${match.params.id}`\n        );\n        if (response.status === 404) {\n          setError(response.statusText);\n        } else {\n          setError('');\n          const data = await response.json();\n          setBlogPost(data.post);\n          setAuthor(data.post.author.username);\n          setComments(data.post.comments);\n        }\n      } catch (err) {\n        console.log(err);\n      }\n      setLoading(false);\n    }\n\n    fetchBlogPostAPI();\n  }, [match.params.id]);\n\n  const addComment = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await fetch(\n        `https://rt-blog-api.herokuapp.com/posts/${match.params.id}/comments`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            author: guestName,\n            text: guestComment,\n          }),\n        }\n      );\n      const commentData = await response.json();\n      if (commentData.errors) {\n        let commentErrors = [];\n        commentData.errors.forEach((error) => {\n          commentErrors.push(`${error.msg} `);\n        });\n        setCommentError(commentErrors);\n      } else {\n        setCommentError('');\n        setComments([...comments, commentData.comment]);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n    setGuestName('');\n    setGuestComment('');\n  };\n\n  return (\n    <div>\n      {error ? (\n        <ErrorMessage>Error: {error}</ErrorMessage>\n      ) : (\n        <>\n          {loading ? (\n            <LoadingIndicator />\n          ) : (\n            <PostLayout>\n              <PostSection>\n                <Title>{parseEntities(blogPost.title)}</Title>\n                <Author>{author}</Author>\n                <Date>Posted on {blogPost.postDate}</Date>\n                <Text>{parseEntities(blogPost.text)}</Text>\n              </PostSection>\n              <CommentSection>\n                <CommentHeader>Comments:</CommentHeader>\n                <CommentForm onSubmit={addComment}>\n                  <label htmlFor=\"guestName\">Name:</label>\n                  <GuestName\n                    value={guestName}\n                    type=\"text\"\n                    id=\"guestName\"\n                    onChange={(e) => setGuestName(e.target.value)}\n                    placeholder=\"Name\"\n                    required\n                  />\n                  <label htmlFor=\"guestComment\">Comment:</label>\n                  <GuestComment\n                    value={guestComment}\n                    id=\"guestComment\"\n                    rows=\"3\"\n                    cols=\"33\"\n                    maxLength=\"500\"\n                    onChange={(e) => setGuestComment(e.target.value)}\n                    placeholder=\"Share your thoughts on this blog post\"\n                    required\n                  />\n                  <SubmitButton type=\"submit\" value=\"Submit\" />\n                </CommentForm>\n                {commentError ? (\n                  <CommentError>Error: {commentError}</CommentError>\n                ) : (\n                  <></>\n                )}\n                <CommentList>\n                  {comments && comments.length > 0 ? (\n                    comments.map((comment) => {\n                      return (\n                        <div key={comment._id}>\n                          <CommentDetail comment={comment} />\n                        </div>\n                      );\n                    })\n                  ) : (\n                    <p>There are no comments. Be the first to add a comment.</p>\n                  )}\n                </CommentList>\n              </CommentSection>\n            </PostLayout>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default PostDetail;\n","import {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\nimport App from './App';\nimport Header from './components/Header';\nimport PostDetail from './components/PostDetail';\n\nconst Routes = () => {\n  return (\n    <Router basename=\"/\">\n      <Header />\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/posts/:id\" component={PostDetail} />\n        <Redirect exact from=\"/posts\" to=\"/\" />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default Routes;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './Routes';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}